           CalendarUitls.newInstance().getCalendar();
                Logger.d("当前年份="+CalendarUitls.newInstance().getCalendar().get(Calendar.YEAR));
                Logger.d("当前月份="+(CalendarUitls.newInstance().getCalendar().get(Calendar.MONTH)+1));//月份是从0开始
                Logger.d("当前天="+CalendarUitls.newInstance().getCalendar().get(Calendar.DATE));
                Logger.d("当前月儿天="+CalendarUitls.newInstance().getCalendar().get(Calendar.DAY_OF_MONTH));
                Logger.d("当前年儿天="+CalendarUitls.newInstance().getCalendar().get(Calendar.DAY_OF_YEAR));
                Logger.d("当月儿周="+CalendarUitls.newInstance().getCalendar().get(Calendar.DAY_OF_WEEK_IN_MONTH));
                //Logger.d("当周儿天="+CalendarUitls.newInstance().getCalendar().get(Calendar.DAY_OF_WEEK));//不能直接用
                switch (CalendarUitls.newInstance().getCalendar().get(Calendar.DAY_OF_WEEK)){
                    case Calendar.MONDAY:
                        Logger.d("今天是星期一");
                        break;
                    case Calendar.TUESDAY:
                        Logger.d("今天是星期二");
                        break;
                    case Calendar.WEDNESDAY:
                        Logger.d("今天是星期三");
                        break;
                    case Calendar.THURSDAY:
                        Logger.d("今天是星期四");
                        break;
                    case Calendar.FRIDAY:
                        Logger.d("今天是星期五");
                        break;
                    case Calendar.SATURDAY:
                        Logger.d("今天是星期六");
                        break;
                    case Calendar.SUNDAY:
                        Logger.d("今天是星期天");
                        break;
                }

              //当前时间 12小时制
               if( CalendarUitls.newInstance().getCalendar().get(Calendar.AM_PM)==Calendar.AM){
                   Logger.d("现在是上午时间：" + CalendarUitls.newInstance().getCalendar().get(Calendar.HOUR));//只播报小时 没有分钟
               }else{
                   Logger.d("现在是下午时间：" + CalendarUitls.newInstance().getCalendar().get(Calendar.HOUR));
               }

                Logger.d("分钟:" + CalendarUitls.newInstance().getCalendar().get(Calendar.MINUTE));
                Logger.d("秒:" + CalendarUitls.newInstance().getCalendar().get(Calendar.SECOND));
                Logger.d("毫秒:" + CalendarUitls.newInstance().getCalendar().get(Calendar.MILLISECOND));
                //24小时制
                Logger.d("当前小时（24）::" + CalendarUitls.newInstance().getCalendar().get(Calendar.HOUR_OF_DAY));

                //规范输出
                //SimpleDateFormat simpleDateFormat = new SimpleDateFormat("{MM月dd日}");
                /*
                yyyy：年
                    MM：月
                    dd：日
                    hh：1~12小时制(1-12)
                    HH：24小时制(0-23)
                    mm：分
                    ss：秒
                    S：毫秒
                    E：星期几
                 */

                //注意gettime 的时候是正确的 月份不用加一
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy年MM月dd日HH时mm分ss秒");
                Logger.d("格式化时间::" + simpleDateFormat.format(CalendarUitls.newInstance().getCalendar().getTime()));

                //添加一个月
                Calendar c = CalendarUitls.newInstance().getCalendar();
                c.add(Calendar.MONTH, 1);
                Logger.d("下个月的当前:" + simpleDateFormat.format(c.getTime()));

                //比较
                Calendar dangqian = CalendarUitls.newInstance().getCalendar();
                Logger.d("dangqian 和 c 是否相等" + dangqian.equals(c));

                Logger.d("dangqian 是否在C之后" + dangqian.after(c));

                Logger.d("dangqian 是否在C之前" + dangqian.before(c));

                //清空某个年份 或 月 或 日
                c.clear(Calendar.YEAR);
                Logger.d("清除C的年::" + simpleDateFormat.format(c.getTime()));
                c.clear(Calendar.MONTH);
                Logger.d("清除C的月::" + simpleDateFormat.format(c.getTime()));
                //c.clear(Calendar.DATE);   //        c.clear(Calendar.DAY_OF_MONTH);无效     c.clear(Calendar.DATE); 只能用set
                c.set(Calendar.DATE, 1);
                Logger.d("清除C的天::" + simpleDateFormat.format(c.getTime()));
                //c.clear(Calendar.HOUR_OF_DAY);//    c.clear(Calendar.HOUR); 无效          c.clear(Calendar.HOUR_OF_DAY)无效 只能用set
                c.set(Calendar.HOUR_OF_DAY, 1);
                Logger.d("清除C的时::" + simpleDateFormat.format(c.getTime()));
                c.clear(Calendar.MINUTE);
                Logger.d("清除C的分钟::" + simpleDateFormat.format(c.getTime()));
                c.clear(Calendar.SECOND);
                Logger.d("清除C的秒::" + simpleDateFormat.format(c.getTime()));

                //复制
                Logger.d("复制前 C::" + simpleDateFormat.format(c.getTime()));
                Logger.d("复制前 dangqian::" + simpleDateFormat.format(dangqian.getTime()));
                c = (Calendar) dangqian.clone();
                Logger.d("复制后 C::" + simpleDateFormat.format(c.getTime()));
                dangqian.add(Calendar.DAY_OF_MONTH, 1);
                Logger.d("dangqian 天数加1 复制后 dangqian::" + simpleDateFormat.format(dangqian.getTime()));

                //比较前后 返回：0 一样， -1 靠前 1 靠后 （针对调用函数方）
                Logger.d("c 和 当前 谁靠前 c.compare dangqian " + c.compareTo(dangqian));

                //设置data
                dangqian.setTime(new Date());
                Logger.d("dangqian settime（new Date()）后：:" + simpleDateFormat.format(dangqian.getTime()));

                dangqian.setTimeInMillis(System.currentTimeMillis());

                Logger.d("dangqian setTimeInMillis（500）后：:" + simpleDateFormat.format(dangqian.getTime()));
                break;
            default:
                Logger.d("unknow");;
                break;